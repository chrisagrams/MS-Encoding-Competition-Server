name: ms-encoding-competition-server

services:

  frontend:
    image: "chrisagrams/ms-encoding-competition-server-frontend"
    container_name: frontend
    build:
      context: ./frontend
      platforms:
        - "linux/amd64"
        - "linux/arm64"
    ports:
      - "8000:80"
    depends_on:
      - backend
  
  backend:
    image: "chrisagrams/ms-encoding-competition-server-backend"
    container_name: backend
    build:
      context: ./backend
      platforms:
        - "linux/amd64"
        - "linux/arm64"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - /tmp:/tmp
      - ./backend/.env:/app/.env
    depends_on:
      postgres:
          condition: service_healthy
          restart: true
      minio:
        condition: service_started
      redis:
        condition: service_started

  worker:
    image: "chrisagrams/ms-encoding-competition-server-backend"
    container_name: worker
    build:
      context: ./backend
      platforms:
        - "linux/amd64"
        - "linux/arm64"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - /tmp:/tmp
      - ./backend/.env:/app/.env
    depends_on:
      postgres:
          condition: service_healthy
          restart: true
      minio:
        condition: service_started
      redis:
        condition: service_started
    command: ["celery", "-A", "tasks", "worker", "--loglevel=INFO"]

  
  postgres:
    image: postgres:15
    container_name: postgres
    restart: always
    ports:
      - "5432:5432"
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: submissions
    healthcheck:
      test: "pg_isready -U postgres -d submissions || exit 1"
      interval: 10s
      retries: 5
      start_period: 30s
      timeout: 10s
    volumes:
      - postgres_data:/var/lib/postgresql/data

  minio:
    image: quay.io/minio/minio:latest
    container_name: minio
    ports:
      - "9000:9000"
      - "9090:9090"
    environment:
      MINIO_ROOT_USER: "admin"
      MINIO_ROOT_PASSWORD: "password"
    command: server /data --console-address ":9090"
    volumes:
      - minio_data:/data
  
  redis:
    image: redis:7
    container_name: redis
    restart: always
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data

  flower:
    image: "mher/flower"
    container_name: flower
    command: ["celery", "--broker=redis://redis", "flower"]
    ports:
      - "5555:5555"
    depends_on:
      - redis

volumes:
  postgres_data:
  minio_data:
  redis_data:
    